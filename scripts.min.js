// for preord button pressed show a modal
$(document).ready(function() {
  $('.button-container').click(function() {
    $('#preOrderModal').show();
  });

  $('.close-button').click(function() {
    $('#preOrderModal').hide();
  });

  $(window).click(function(event) {
    if (event.target.id === 'preOrderModal') {
      $('#preOrderModal').hide();
    }
  });

  $('#preOrderForm').submit(function(e) {
    e.preventDefault();
    var formData = $(this).serialize(); 
    console.log('form data', formData);
    
    $.ajax({
      type: 'POST',
      url: 'https://jsonplaceholder.typicode.com/posts',
      data: formData,
      success: function(response) {
        alert('Thank you for your pre-order!');
        $('#preOrderModal').hide(); 
      },
      error: function() {
        alert('There was an error. Please try again later.');
      }
    });
  });
});
// preorder for modal code ends here

// this functions will return an array for scrset for images added dynamically 
function getImagePaths(parameter, folder, mobile = false) {
  const types = ['png', 'jpg'];
  let paths = types.map(type => {
    // Define the path format for desktop and mobile
    const desktopPath = `images/${folder}/${parameter}_${type}/${parameter}`;
    const mobilePath = `images/${folder}/${parameter}_${type}/${parameter}_mobile`;

    // Choose the appropriate path based on the 'mobile' flag
    const basePath = mobile ? mobilePath : desktopPath;

    // Return the srcset string
    return `${basePath}.${type} 1x, ${basePath}@2x.${type} 2x, ${basePath}@3x.${type} 3x`;
  });

  return paths.join(', ');
}


// dynamically add images to status container
function addImageToContainer(parameter, notLastLine = true) {
  const $statusContainer = $('<div/>', {
    class: 'status-container',
    'data-parameter': parameter
  }).appendTo('#container_rectagle_11');

  const $statusInfoContainer = $('<div/>', { class: 'status-info-container' }).appendTo($statusContainer);
  $('<span/>', { class: 'status-text', id: `status_text_${parameter}` }).appendTo($statusInfoContainer);
  $('<span/>', { class: 'status-circle', id: `status_circle_${parameter}` }).appendTo($statusInfoContainer);

  // Determine if the current viewport width is for mobile
  const isMobile = window.innerWidth <= 768;
  
  // Adjust srcset based on viewport width
  const imgSrcset = getImagePaths(parameter, 'status', isMobile);
  const sizes = isMobile ? "(max-width: 480px) 480px, (max-width: 768px) 768px, 800px" : "100vw";

  $('<img/>', {
    src: `images/status/${parameter}_jpg/${parameter}.jpg`, // Default image src
    srcset: imgSrcset,
    sizes: sizes,
    alt: `${parameter} Image`
  }).appendTo($statusInfoContainer);

  if (notLastLine) {
    $('<div/>', { class: 'Line-8' }).appendTo($statusContainer);
  }
}


// change the status from IN PROGRESS to DONE and add class to the circle (to be green for done orange for in progress)
function changeStatus(parameter, status) {
  const $statusText = $(`#status_text_${parameter}`);
  const $statusCircle = $(`#status_circle_${parameter}`);

  if (status !== 'EMPTY') {
    $statusText.text(status);
    $statusCircle.removeClass('done in-progress');
  }

  let newClass = status.toLowerCase().replace(' ', '-');
  $statusCircle.addClass(newClass);
}


// dynamically change image to traking bottle, each step has a bottle
function addImageToTrackingBottle(parameter) {
  $('#traking_bottle').empty().append($('<img/>', {
    src: `images/tracking/${parameter}/tracking-icons_jpg/tracking-icons.jpg`,
    srcset: `
      images/tracking/${parameter}/tracking-icons_png/tracking-icons.png 1x,
      images/tracking/${parameter}/tracking-icons_png/tracking-icons@2x.png 2x,
      images/tracking/${parameter}/tracking-icons_png/tracking-icons@3x.png 3x,
      images/tracking/${parameter}/tracking-icons_jpg/tracking-icons.jpg 1x,
      images/tracking/${parameter}/tracking-icons_jpg/tracking-icons@2x.jpg 2x,
      images/tracking/${parameter}/tracking-icons_jpg/tracking-icons@3x.jpg 3x
    `,
    alt: `${parameter} Image` }));
}

// steps and for status and tacking bottle
const steps = [
  { parameter: 'sauce_production', tracking: 'tracking2'},
  { parameter: 'Bottling', tracking: 'tracking3' },
  { parameter: 'delivery-nutakuHQ', tracking: 'tracking4' },
  { parameter: 'Second_quality_control', tracking: 'tracking5' },
  { parameter: 'hand_packaging', tracking: 'tracking6'},
  { parameter: 'shipping', tracking: 'tracking7' },
];

steps.forEach((step, index) => {
  addImageToContainer(step.parameter, index < steps.length - 1);
});

// add the first tracking bottle
addImageToTrackingBottle('tracking1');

function setActiveStep(activeParameter) {
  let foundActive = false;

  steps.forEach((step, index) => {
    if (step.parameter === activeParameter) {
      changeStatus(activeParameter, 'DONE');
      foundActive = true;
      addImageToTrackingBottle(step.tracking);

      const nextIndex = index + 1;
      if (nextIndex < steps.length) {
        const nextStep = steps[nextIndex];
        changeStatus(nextStep.parameter, 'IN-PROGRESS');
        addImageToTrackingBottle(nextStep.tracking);
      }
    } else if (!foundActive) {
      const status = $(`#status_text_${step.parameter}`).text().toUpperCase();
      if (status !== 'DONE') {
        changeStatus(step.parameter, 'DONE');
      }
    }
  });

  $('.status-container').each(function() {
    const parameter = $(this).data('parameter');
    if (steps.findIndex(step => step.parameter === parameter) > steps.findIndex(step => step.parameter === activeParameter)) {
      changeStatus(parameter, 'EMPTY');
    }
  });
}

// Active each step manually in console log
// setActiveStep('sauce_production');
// setActiveStep('Bottling');
// setActiveStep('delivery-nutakuHQ');
// setActiveStep('Second_quality_control');
// setActiveStep('hand_packaging');
// setActiveStep('shipping');


// this was for updating itself (the status and the tacking bottle), I left the code as I did it before requirements
// and it can be a good improvement :)
const stepsAuto = [
  { parameter: 'sauce_production', tracking: 'tracking2', status: 'IN-PROGRESS' },
  { parameter: 'sauce_production', tracking: 'tracking2', status: 'DONE' },
  { parameter: 'Bottling', tracking: 'tracking3', status: 'IN-PROGRESS' },
  { parameter: 'Bottling', tracking: 'tracking3', status: 'DONE' },
  { parameter: 'delivery-nutakuHQ', tracking: 'tracking4', status: 'IN-PROGRESS' },
  { parameter: 'delivery-nutakuHQ', tracking: 'tracking4', status: 'DONE' },
  { parameter: 'Second_quality_control', tracking: 'tracking5', status: 'IN-PROGRESS' },
  { parameter: 'Second_quality_control', tracking: 'tracking5', status: 'DONE' },
  { parameter: 'hand_packaging', tracking: 'tracking6', status: 'IN-PROGRESS' },
  { parameter: 'hand_packaging', tracking: 'tracking6', status: 'DONE' },
  { parameter: 'shipping', tracking: 'tracking7', status: 'IN-PROGRESS' },
  { parameter: 'shipping', tracking: 'tracking7', status: 'DONE' },
];

function updateProcess(steps) {
  steps.forEach((step, index) => {
    setTimeout(() => {
      if (step.tracking) addImageToTrackingBottle(step.tracking);
      if (step.status) changeStatus(step.parameter, step.status);
    }, 1000 * index);
  });
}

$(document).ready(function() {
  $("#autoupdateModal").show();

  $("#noButton, .close-button").click(function() {
    $("#autoupdateModal").hide();
  });

  $("#yesButton").click(function() {
    updateProcess(stepsAuto);
    $("#autoupdateModal").hide();
  });
});


/* 
// First I made some of functionality work, then I optimised it, I am leaving here some of the code to see the progress:
// dynamically add images to status container

function addImageToContainer(parameter, notLastLine = true) {
  var $newDiv = $('<div/>', { class: 'status-container' }).appendTo('#container_rectagle_11');
  var $statusSpan = $('<span/>', {
    class: 'status-text',
    id: `status_${parameter}`
  }).appendTo($newDiv);

  $('<span/>', {
    class: 'status-circle',
    id: `status_circle_${parameter}`
  }).appendTo($newDiv);

  $('<img/>', {
    src: `images/status/${parameter}_jpg/${parameter}.jpg`,
    srcset: `
      images/status/${parameter}_png/${parameter}.png 1x,
      images/status/${parameter}_png/${parameter}@2x.png 2x,
      images/status/${parameter}_png/${parameter}@3x.png 3x,
      images/status/${parameter}_jpg/${parameter}.jpg 1x,
      images/status/${parameter}_jpg/${parameter}@2x.jpg 2x,
      images/status/${parameter}_jpg/${parameter}@3x.jpg 3x
    `,
    alt: `${parameter} Image`
  }).appendTo($newDiv);

  if (notLastLine) {
    $('<div/>', { class: 'Line-8' }).appendTo('#container_rectagle_11');
  }
}

addImageToContainer('sauce_production');
addImageToContainer('Bottling');
addImageToContainer('delivery-nutakuHQ');
addImageToContainer('Second_quality_control');
addImageToContainer('hand_packaging');
addImageToContainer('shipping', false);

function changeMyStatusText(statusId, text) {
  $(`#status_${statusId}`).text(text);
  var statusColor = text === 'DONE' ? 'green' : 'orange';

  $(`#status_circle_${statusId}`).css({
    backgroundColor: statusColor,
  });
}

// dynamically change image to traking bottle

function addImageToTrackingBottle(parameter) {
  var $trackingBottle = $('#traking_bottle');
  $trackingBottle.empty(); // Remove any existing content

  $('<img/>', {
      src: `images/tracking/${parameter}/tracking-icons_jpg/tracking-icons.jpg`,
      srcset: `
        images/tracking/${parameter}/tracking-icons_png/tracking-icons.png 1x,
        images/tracking/${parameter}/tracking-icons_png/tracking-icons@2x.png 2x,
        images/tracking/${parameter}/tracking-icons_png/tracking-icons@3x.png 3x,
        images/tracking/${parameter}/tracking-icons_jpg/tracking-icons.jpg 1x,
        images/tracking/${parameter}/tracking-icons_jpg/tracking-icons@2x.jpg 2x,
        images/tracking/${parameter}/tracking-icons_jpg/tracking-icons@3x.jpg 3x
      `,
      alt: `${parameter} Image`
  }).appendTo($trackingBottle);
}

addImageToTrackingBottle('tracking1');
changeMyStatusText("sauce_production", "IN-PROGRESS")

setTimeout(function() {
  addImageToTrackingBottle('tracking2');
  changeMyStatusText("Bottling", "IN-PROGRESS")
  changeMyStatusText("sauce_production", "DONE")
}, 1000);

setTimeout(function() {
  addImageToTrackingBottle('tracking3');
  changeMyStatusText("delivery-nutakuHQ", "IN-PROGRESS")
  changeMyStatusText("Bottling", "DONE")
}, 2000);

setTimeout(function() {
  addImageToTrackingBottle('tracking4');
  changeMyStatusText("Second_quality_control", "IN-PROGRESS")
  changeMyStatusText("delivery-nutakuHQ", "DONE")
}, 3000);

setTimeout(function() {
  addImageToTrackingBottle('tracking5');
  changeMyStatusText("hand_packaging", "IN-PROGRESS")
  changeMyStatusText("Second_quality_control", "DONE")
}, 4000);

setTimeout(function() {
  addImageToTrackingBottle('tracking6');
  changeMyStatusText("shipping", "IN-PROGRESS")
  changeMyStatusText("hand_packaging", "DONE")
}, 5000);

setTimeout(function() {
  addImageToTrackingBottle('tracking7');
  changeMyStatusText("shipping", 'DONE');
}, 6000); 

// Make setActiveStep globally accessible for Dev Tools Console execution
// window.setActiveStep = setActiveStep;

//this was to make this in progress and the next step done, a bit different the logic
// function setActiveStep(activeParameter) {
//   let previousStepParameter = null;

//   const currentIndex = steps.findIndex(step => step.parameter === activeParameter);
//   if (currentIndex > 0) { // Ensures there is a previous step
//     previousStepParameter = steps[currentIndex - 1].parameter;
//     changeStatus(previousStepParameter, 'DONE');
//   }

//   $('.status-container').each(function() {
//     const parameter = $(this).data('parameter');
//     if (parameter === activeParameter) {
//       changeStatus(parameter, 'IN-PROGRESS');
//       addImageToTrackingBottle(steps[currentIndex].tracking);
//     } else if (parameter !== previousStepParameter) {
//       const status = $(`#status_text_${parameter}`).text().toUpperCase();
//       if (status !== 'DONE') {
//         changeStatus(parameter, 'EMPTY');
//       }
//     }
//   });

//   if (steps[currentIndex] && steps[currentIndex].status === 'DONE' && currentIndex < steps.length - 1) {
//     const nextStepParameter = steps[currentIndex + 1].parameter;
//     setActiveStep(nextStepParameter);
//   }
// }

*/